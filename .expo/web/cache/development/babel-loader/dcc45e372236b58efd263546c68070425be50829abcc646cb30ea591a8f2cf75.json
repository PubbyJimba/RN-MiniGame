{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport PrimaryButton from \"../components/PrimaryButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction StartGameScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredNuber = _useState2[0],\n    setEnteredNumber = _useState2[1];\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n  function resetInputHandler() {\n    setEnteredNumber('');\n  }\n  function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNuber);\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert('Invalid number!', 'Number has to be between 1 and 99.', [{\n        text: 'Okay',\n        style: 'destructive',\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n    console.log('Valid number!');\n  }\n  return _jsxs(View, {\n    style: styles.inputContainer,\n    children: [_jsx(TextInput, {\n      style: styles.numberInput,\n      maxLength: 2,\n      keyboardType: \"number-pad\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      onChangeText: numberInputHandler,\n      value: enteredNuber\n    }), _jsxs(View, {\n      style: styles.buttonsContainer,\n      children: [_jsx(View, {\n        style: styles.buttonContainer,\n        children: _jsx(PrimaryButton, {\n          onPress: resetInputHandler,\n          children: \"Reset\"\n        })\n      }), _jsx(View, {\n        style: styles.buttonContainer,\n        children: _jsx(PrimaryButton, {\n          onPress: confirmInputHandler,\n          children: \"Confirm\"\n        })\n      })]\n    })]\n  });\n}\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  inputContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 100,\n    marginHorizontal: 24,\n    padding: 16,\n    backgroundColor: '#3b021f',\n    borderRadius: 8,\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowRadius: 6,\n    shadowOpacity: 0.25\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: '#ddb52f',\n    borderBottomWidth: 2,\n    color: '#ddb52f',\n    marginVertical: 8,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["useState","TextInput","View","StyleSheet","Alert","PrimaryButton","jsx","_jsx","jsxs","_jsxs","StartGameScreen","_useState","_useState2","_slicedToArray","enteredNuber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","alert","text","style","onPress","console","log","styles","inputContainer","children","numberInput","maxLength","keyboardType","autoCapitalize","autoCorrect","onChangeText","value","buttonsContainer","buttonContainer","create","justifyContent","alignItems","marginTop","marginHorizontal","padding","backgroundColor","borderRadius","elevation","shadowColor","shadowOffset","width","height","shadowRadius","shadowOpacity","fontSize","borderBottomColor","borderBottomWidth","color","marginVertical","fontWeight","textAlign","flexDirection","flex"],"sources":["/Users/isaacsant/Desktop/MyCode/RNCourse/RN-MiniGame/screens/StartGameScreen.js"],"sourcesContent":["import { useState } from 'react';\nimport { TextInput, View, StyleSheet, Alert } from 'react-native';\n\nimport PrimaryButton from '../components/PrimaryButton';\n\nfunction StartGameScreen() {\n  const [enteredNuber, setEnteredNumber] = useState('');\n\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n\n  function resetInputHandler() {\n    setEnteredNumber('');\n  }\n\n  function confirmInputHandler() {\n    const chosenNumber = parseInt(enteredNuber);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert('Invalid number!', 'Number has to be between 1 and 99.', [\n        { text: 'Okay', style: 'destructive', onPress: resetInputHandler },\n      ]);\n      return;\n    }\n\n    console.log('Valid number!');\n  }\n\n  return (\n    <View style={styles.inputContainer}>\n      <TextInput\n        style={styles.numberInput}\n        maxLength={2}\n        keyboardType=\"number-pad\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        onChangeText={numberInputHandler}\n        value={enteredNuber}\n      />\n      <View style={styles.buttonsContainer}>\n        <View style={styles.buttonContainer}>\n          <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\n        </View>\n        <View style={styles.buttonContainer}>\n          <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nexport default StartGameScreen;\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 100,\n    marginHorizontal: 24,\n    padding: 16,\n    backgroundColor: '#3b021f',\n    borderRadius: 8,\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 4 },\n    shadowRadius: 6,\n    shadowOpacity: 0.25,\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: '#ddb52f',\n    borderBottomWidth: 2,\n    color: '#ddb52f',\n    marginVertical: 8,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  buttonsContainer: {\n    flexDirection: 'row',\n  },\n  buttonContainer: {\n    flex: 1,\n  },\n});\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,OAAAC,SAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAGjC,OAAOC,aAAa;AAAoC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExD,SAASC,eAAeA,CAAA,EAAG;EACzB,IAAAC,SAAA,GAAyCX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,YAAY,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EAErC,SAASI,kBAAkBA,CAACC,WAAW,EAAE;IACvCF,gBAAgB,CAACE,WAAW,CAAC;EAC/B;EAEA,SAASC,iBAAiBA,CAAA,EAAG;IAC3BH,gBAAgB,CAAC,EAAE,CAAC;EACtB;EAEA,SAASI,mBAAmBA,CAAA,EAAG;IAC7B,IAAMC,YAAY,GAAGC,QAAQ,CAACP,YAAY,CAAC;IAE3C,IAAIQ,KAAK,CAACF,YAAY,CAAC,IAAIA,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,EAAE,EAAE;MACjEhB,KAAK,CAACmB,KAAK,CAAC,iBAAiB,EAAE,oCAAoC,EAAE,CACnE;QAAEC,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE,aAAa;QAAEC,OAAO,EAAER;MAAkB,CAAC,CACnE,CAAC;MACF;IACF;IAEAS,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B;EAEA,OACEnB,KAAA,CAACP,IAAI;IAACuB,KAAK,EAAEI,MAAM,CAACC,cAAe;IAAAC,QAAA,GACjCxB,IAAA,CAACN,SAAS;MACRwB,KAAK,EAAEI,MAAM,CAACG,WAAY;MAC1BC,SAAS,EAAE,CAAE;MACbC,YAAY,EAAC,YAAY;MACzBC,cAAc,EAAC,MAAM;MACrBC,WAAW,EAAE,KAAM;MACnBC,YAAY,EAAErB,kBAAmB;MACjCsB,KAAK,EAAExB;IAAa,CACrB,CAAC,EACFL,KAAA,CAACP,IAAI;MAACuB,KAAK,EAAEI,MAAM,CAACU,gBAAiB;MAAAR,QAAA,GACnCxB,IAAA,CAACL,IAAI;QAACuB,KAAK,EAAEI,MAAM,CAACW,eAAgB;QAAAT,QAAA,EAClCxB,IAAA,CAACF,aAAa;UAACqB,OAAO,EAAER,iBAAkB;UAAAa,QAAA,EAAC;QAAK,CAAe;MAAC,CAC5D,CAAC,EACPxB,IAAA,CAACL,IAAI;QAACuB,KAAK,EAAEI,MAAM,CAACW,eAAgB;QAAAT,QAAA,EAClCxB,IAAA,CAACF,aAAa;UAACqB,OAAO,EAAEP,mBAAoB;UAAAY,QAAA,EAAC;QAAO,CAAe;MAAC,CAChE,CAAC;IAAA,CACH,CAAC;EAAA,CACH,CAAC;AAEX;AAEA,eAAerB,eAAe;AAE9B,IAAMmB,MAAM,GAAG1B,UAAU,CAACsC,MAAM,CAAC;EAC/BX,cAAc,EAAE;IACdY,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAE,GAAG;IACdC,gBAAgB,EAAE,EAAE;IACpBC,OAAO,EAAE,EAAE;IACXC,eAAe,EAAE,SAAS;IAC1BC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,OAAO;IACpBC,YAAY,EAAE;MAAEC,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IACrCC,YAAY,EAAE,CAAC;IACfC,aAAa,EAAE;EACjB,CAAC;EACDvB,WAAW,EAAE;IACXqB,MAAM,EAAE,EAAE;IACVD,KAAK,EAAE,EAAE;IACTI,QAAQ,EAAE,EAAE;IACZC,iBAAiB,EAAE,SAAS;IAC5BC,iBAAiB,EAAE,CAAC;IACpBC,KAAK,EAAE,SAAS;IAChBC,cAAc,EAAE,CAAC;IACjBC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE;EACb,CAAC;EACDvB,gBAAgB,EAAE;IAChBwB,aAAa,EAAE;EACjB,CAAC;EACDvB,eAAe,EAAE;IACfwB,IAAI,EAAE;EACR;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}